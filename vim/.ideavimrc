" vim: foldmethod=marker foldlevel=0

" IDEA VIM compliant version of my vimrc

" Issues:
" - Custom functions don't work
" - no wildmenu

" NOTE:
" - Set up folding based on markers in the file. `za` toggles folds
" - These functions clobber "z 'z and 'Z on the reg, beware.


" ---------- General ---------- {{{1
" Override Y to behave like C and D
map Y y$

" Go to file in new tab
nnoremap gf <C-w>gf

" Save undos after file closes
set undofile
" Number of undos to save
set undolevels=1000
" Number of lines to save for undo
set undoreload=10000

" Set dirs so we don't litter all over
set undodir=~/.vim/cache/undo
set backupdir=~/.vim/cache/backup
set dir=~/.vim/cache/swap

" Prompt to save instead of erroring
set confirm

" Open horizontal splits below existing windows
set splitbelow

" No sounds or bells
set visualbell
set belloff=all

" Wrap lines at words when possible
set linebreak

" Turn on line numbers
set number

" highlight matching [{()}]
set showmatch

" Show tabs even if its just one file
set showtabline=2

" Work with crontabs
augroup CrontabConfig
  autocmd!
  autocmd BufNewFile,BufRead crontab.* set nobackup | set nowritebackup
augroup END

" Use the clipboard as the default register
set clipboard^=unnamed

" Delay after typing stops before checking again (used by gitgutter).
" Can cause issues under 1000ms
set updatetime=50

" Remove escape delays (This breaks arrow keys in insert mode)
set noesckeys

" Autocorrect some typos when trying to quit
command! W w
command! Wq wq
command! Q q
command! WQ wq



" ---------- Plugins ---------- {{{1

set commentary
set surround
set multiple-cursors
map <C-n> <A-n>
map <C-x> <A-x>
map <C-p> <A-p>
set NERDTree

""" NERDTree Config
" Automatically delete the buffer of the file you just deleted with NerdTree:
let NERDTreeAutoDeleteBuffer = 1

" Toggle visibility of hidden files using i and I
let NERDTreeShowHidden=1

" Don't open NERDTree by default
let g:nerdtree_tabs_open_on_gui_startup=0

" Don't show ^G before file names
let g:NERDTreeNodeDelimiter = "\u00a0"

" Close tree once file is selected
let NERDTreeQuitOnOpen = 1

" Toggle Nerd Tree with control + b
" Unfortunately the directory view isn't treated as a pane,
" so I'm using esc to focus the editor and q to close the pane when focused
nnoremap <silent> <C-b> :NERDTreeFind <BAR> :NERDTreeFocus <CR>



" ---------- Cursor ---------- {{{1
" Enable mouse
set mouse=a

" Disable cursor blink
set guicursor=a:blinkon0



" ---------- Spaces and Tabs ---------- {{{1
" Remove trailing whitespace on save
augroup RemoveTrailingWhitespaceGroup
  autocmd!
  autocmd BufWritePre * %s/\s\+$//e
augroup END

" Indentation settings for using 4 spaces instead of tabs.
set softtabstop=2
set shiftwidth=2
set expandtab


" ---------- Folding ---------- {{{1
" enable folding
set foldenable

" open most folds by default
set foldlevelstart=10

" 10 nested fold max
set foldnestmax=10

" fold based on indent level
set foldmethod=marker

" Custom Folding Colors
augroup FoldColorGroup
  highlight Folded cterm=NONE term=bold ctermfg=white
augroup END

" Custom Fold Content
set foldtext=FoldText()

function! FoldText()
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart
  let line = trim(substitute(substitute(substitute(substitute(line, '\d', '', 'g'), '-', '', 'g'), '{', '', 'g'), '"', '', 'g'))
  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))

  if windowwidth > 100
    let maxtitlelength = 50
    let titlepadding = maxtitlelength - len(line)
    let fillcharcount = windowwidth - maxtitlelength - len(foldedlinecount) - (v:foldlevel * 2)
    return repeat('  ', v:foldlevel - 1) . 'â–¸ ' . line . repeat(' ', titlepadding - 3) . 'L# ' . foldedlinecount . repeat(' ', fillcharcount) . ' '
  else
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - (v:foldlevel * 2)
    return repeat('  ', v:foldlevel - 1) . 'â–¸ ' . line . repeat(' ',fillcharcount) . foldedlinecount . '  '
  endif
endfunction


" ---------- Leader: General ---------- {{{1
" Map space to leader
let mapleader = " "

" Make space leader behave the same as other keys would
nnoremap <Space> <nop>

" turn off search highlight
nnoremap <leader>n :noh<CR>

" Fix linting errors
nnoremap <leader>af :action ReformatCode<CR>

" Map keys to navigate between lines with errors and warnings.
nnoremap <leader>an :action GotoNextError<CR>
nnoremap <leader>ap :action GotoPreviousError<CR>

" Apply last operation to a range of lines
vnoremap <leader>. : normal .<CR>

" Apply "o" macro operation to the selected lines
vnoremap <leader>o : normal @o<CR>

" Fix indentation for the whole file
map <leader>= gg=G''

" Go to import and open source file in new tab (if import is in a single line)
nnoremap <leader>gf gd$hhh<C-w>gfn<CR>

" Search for highlighted text
vnoremap <leader>/ "zy/<C-R>z<CR>


" ---------- Leader: Custom Functions ---------- {{{1
" Mappings that use custom functions
nnoremap <leader>log "zciWprintln("z" + z);==
nnoremap <leader>js  "zciwGson().toJson(z)==


" ---------- Movement & Searching ---------- {{{1
" I override b,w,e, and ge in plugins > CamelCaseMotion

" highlight matches
set hlsearch

" Case insensitive unless a capital character is included
set ignorecase
set smartcase

"Start scrolling when we're 10 lines away
set scrolloff=10
set sidescrolloff=10

" Don't skip visual lines (wrapped text)
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk

" c-h and c-l binds for panes were implemented by my tmux interop plugin which isn't supported
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

